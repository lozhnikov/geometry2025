/**

@file algorithms/convex_hull.dox
@author Almaz Sadikov

@page convex_hull Построение выпуклой оболочки

@section convex_hull_overview Обзор

Алгоритм для построения минимальной выпуклой оболочки множества точек на плоскости. 
Реализация использует модифицированный алгоритм Грэхема с улучшенной обработкой коллинеарных точек.

@section convex_hull_complexity Сложность
- Временная сложность: O(n log n)
- Пространственная сложность: O(n)
где n - количество входных точек

@section convex_hull_implementation Реализация
1. Находим точку-опору (pivot) с минимальной y-координатой (и минимальной x при равенстве)
2. Сортируем все остальные точки по полярному углу относительно pivot
3. Удаляем коллинеарные точки, оставляя только самую удаленную
4. Строим выпуклую оболочку, обрабатывая точки в отсортированном порядке:
   - Для каждой точки проверяем, образует ли она выпуклый поворот с последними двумя точками оболочки
   - Если поворот невыпуклый, удаляем предыдущую точку из оболочки
5. Возвращаем построенную оболочку

@subsection convex_hull_details Детали реализации
1. Выбор опорной точки:
   - Ищем точку с минимальными координатами (сначала по y, затем по x)
   - Используется стандартный алгоритм поиска минимума

2. Сортировка точек:
   - По полярному углу относительно pivot
   - При равных углах - по расстоянию от pivot

3. Построение оболочки:
   - Используется стек для хранения текущей оболочки
   - Проверка выпуклости через знак векторного произведения

4. Вспомогательные функции:
   - CrossProduct(a, b, c) - вычисляет векторное произведение
   - SquaredDistance(a, b) - вычисляет квадрат расстояния между точками
   - PolarAngleComparator - компаратор для сортировки по полярному углу
*/